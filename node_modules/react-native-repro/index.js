// Import example:
//
// import Repro from 'react-native-repro';

import { NativeModules } from 'react-native';

const safeString = (str) => {
    if (str && str === 'null') { return null };
    return str;
}
class NewsFeedEntry {
    constructor(value) {
        this.id       = value["newsfeed_id"];
        this.deviceID = value["device_id"];
        this.title    = value["title"];
        this.summary  = value["summary"];
        this.body     = safeString(value["body"]);
        this.shown    = value["shown"];
        this.read     = value["read"];

        this.deliveredAt = value["delivered_at"];

        this.linkUrl = safeString(value["link_url"]);
        this.imageUrl = safeString(value["image_url"]);
    }

    toJson() {
        return {
            "newsfeed_id": this.id,
            "deviceID": this.deviceID,
            "title": this.title,
            "summary": this.summary,
            "body": this.body,
            "shown": this.shown,
            "read": this.read,
            "delivered_at": this.deliveredAt,
            "link_url": this.linkUrl,
            "image_url": this.imageUrl
        };
    }
}

const NewsFeedModule = {
    getNewsFeeds: (limit, callback) => {
        NativeModules.Repro.getNewsFeeds(limit, (error, items) => {
            if (!callback) return;
            if (!items) {
                callback(null, []);
                return;
            }

            const newsFeeds = [];

            for (const item of items) {
                newsFeeds.push(new NewsFeedEntry(item));
            }

            callback(error, newsFeeds);
        })
    },

    getNewsFeedsFor: (limit, offsetID, callback) => {
        NativeModules.Repro.getNewsFeedsFor(limit, offsetID, (error, items) => {
            if (!callback) return;
            if (!items) {
                callback(null, []);
                return;
            }

            const newsFeeds = [];

            for (const item of items) {
                newsFeeds.push(new NewsFeedEntry(item));
            }

            callback(error, newsFeeds);
        })
    },

    updateNewsFeeds: (newsFeeds, callback) => {
        const items = [];

        for(const entry of newsFeeds) {
            if (entry && entry instanceof NewsFeedEntry) {
                items.push(entry.toJson());
            }
        }

        NativeModules.Repro.updateNewsFeeds(items, (error) => {
            callback(error);
        });
    },
}

class RemoteConfigValue {
    constructor(value) {
        this.value = value;
    }

    asString() {
        if (typeof this.value === 'string') {
            return this.value;
        }

        return null;
    }

    toString() {
        return this.value ?? "";
    }
}

class RemoteConfigModule {
    static fetch(timeout, callback) {
        NativeModules.RemoteConfig.fetch(timeout, callback);
    }

    static activateFetched() {
        NativeModules.RemoteConfig.activateFetched()
    }

    static setDefaultsFromDictionary(dict) {
        NativeModules.RemoteConfig.setDefaultsFromDictionary(dict);
    }

    static setDefaultsFromJsonString(str) {
        NativeModules.RemoteConfig.setDefaultsFromJsonString(str);
    }

    static getAllValues(callback) {
        NativeModules.RemoteConfig.getAllValues((values) => {
            if (!callback) return;

            var retValue = {}
            for(k in values) {
                retValue[k] = new RemoteConfigValue(values[k]);
            }

            callback(retValue);
        });
    }

    static getAllValuesWithPrefix(prefix, callback) {
        NativeModules.RemoteConfig.getAllValuesWithPrefix(prefix, (values) => {
            if (!callback) return;

            var retValue = {}
            for(k in values) {
                retValue[k] = new RemoteConfigValue(values[k]);
            }

            callback(retValue);
        });
    }

    static getValue(key, callback) {
        NativeModules.RemoteConfig.getValue(key, (value) => {
            if (!callback) return;
            callback(new RemoteConfigValue(value))
        })
    }

    static getLocalDefaultValue(key, callback) {
        NativeModules.RemoteConfig.getLocalDefaultValue(key, (value) => {
            if (!callback) return;
            callback(new RemoteConfigValue(value))
        })
    }

    static forceReset() {
        NativeModules.RemoteConfig.forceReset()
    }
}

const Repro = {
    ...NativeModules.Repro,
    ...NewsFeedModule,
    ...{ remoteConfig: RemoteConfigModule },
}

export default Repro;

